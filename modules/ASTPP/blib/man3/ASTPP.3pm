.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ASTPP 3"
.TH ASTPP 3 "2013-07-25" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ASTPP \- Perl extension for ASTPP (www.astpp.org).
Module contains functions to assist with the operation of ASTPP (www.astpp.org)
.SH "EXPORT"
.IX Header "EXPORT"
Everything by default.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use \s-1ASTPP\s0;
.PP
\&\f(CW$ASTPP\fR = new \s-1ASTPP\s0;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module should make it easier to write scripts that interact with \s-1ASTPP\s0
.SH "MODULE COMMANDS"
.IX Header "MODULE COMMANDS"
.ie n .IP "$ASTPP\->\fIset_astpp_db()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIset_astpp_db()\fR" 4
.IX Item "$ASTPP->set_astpp_db()"
Pushes the \s-1ASTPP\s0 database connection into module for internal use
.Sp
Example: \f(CW$ASTPP\fR\->set_astpp_db($astpp_db)
.ie n .IP "$ASTPP\->\fIset_freeswitch_db()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIset_freeswitch_db()\fR" 4
.IX Item "$ASTPP->set_freeswitch_db()"
Pushes the Freeswitch database connection into module for internal use
.Sp
Example: \f(CW$ASTPP\fR\->set_freeswitch_db($freeswitch_db)
.ie n .IP "$ASTPP\->\fIset_cdr_db()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIset_cdr_db()\fR" 4
.IX Item "$ASTPP->set_cdr_db()"
Pushes the cdr database connection into module for internal use
.Sp
Example: \f(CW$ASTPP\fR\->set_cdr_db($cdr_db)
.ie n .IP "$ASTPP\->\fIset_asterisk_agi()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIset_asterisk_agi()\fR" 4
.IX Item "$ASTPP->set_asterisk_agi()"
Pushes the Asterisk \s-1AGI\s0 connection into module for internal use
.Sp
Example: \f(CW$ASTPP\fR\->set_asterisk_agi($AGI)
.ie n .IP "$ASTPP\->\fIip_address_authenticate()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIip_address_authenticate()\fR" 4
.IX Item "$ASTPP->ip_address_authenticate()"
Authenticates call by caller ip address.  Works with both Asterisk(tm) and
Freeswitch(tm).
.Sp
Example:
\&\f(CW$ipdata\fR = \f(CW$ASTPP\fR\->ip_address_authenticate(
	ip_address      => \*(L"192.168.1.1\*(R",
	destination     => \*(L"18005551212\*(R"
)
.ie n .IP "$ASTPP\->\fIfs_dialplan_xml_header()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_dialplan_xml_header()\fR" 4
.IX Item "$ASTPP->fs_dialplan_xml_header()"
Return the opening lines of the Freeswitch(\s-1TM\s0) xml dialplan.  If a call is
inbound via a \s-1DID\s0 or if we're authenticating via \s-1IP\s0 address we need to be in the
public context instead of the default context.
.Sp
Example:
\&\f(CW$xml\fR .= \f(CW$ASTPP\fR\->fs_dialplan_xml_header(
	\s-1DID\s0     => \f(CW$diddata\fR\->{number},
	\s-1IP\s0      => \f(CW$ipdata\fR\->{account},
	destination_number => \f(CW$dialed_number\fR
)
.ie n .IP "$ASTPP\->\fIfs_dialplan_xml_timelimit()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_dialplan_xml_timelimit()\fR" 4
.IX Item "$ASTPP->fs_dialplan_xml_timelimit()"
Return lines of the Freeswitch(\s-1TM\s0) xml dialplan that set the accountcode as well
as limit the length of the call.
.Sp
Example:
\&\f(CW$xml\fR .= \f(CW$ASTPP\fR\->fs_dialplan_xml_timelimit(
	accountcode     => \f(CW$carddata\fR\->{number},
	max_length      => \f(CW$maxlength\fR
)
.ie n .IP "$ASTPP\->\fIfs_dialplan_xml_did()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_dialplan_xml_did()\fR" 4
.IX Item "$ASTPP->fs_dialplan_xml_did()"
Return the dialplan code for an incoming call to a \s-1DID\s0.
.Sp
Example:
\&\f(CW$xml\fR .= \f(CW$ASTPP\fR\->fs_dialplan_xml_did(
	did             => \f(CW$destination\fR,
	accountcode     => \f(CW$carddata\fR\->{number}
)
.ie n .IP "$ASTPP\->\fIfs_dialplan_xml_bridge()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_dialplan_xml_bridge()\fR" 4
.IX Item "$ASTPP->fs_dialplan_xml_bridge()"
Return the bridge command along with details.  This is only called if a call is approved.
.Sp
Example:
\&\f(CW$xml\fR .= \f(CW$ASTPP\fR\->fs_dialplan_xml_bridge(
      destination_number => \f(CW$params\fR\->{'Caller\-Destination\-Number'},
      route_prepend      => \f(CW$route\fR\->{prepend},
      trunk_name         => \f(CW$route\fR\->{trunk},
      route_id	   	 => \f(CW$route\fR\->{id},
      count		 => \f(CW$count\fR,
      provider 	   	 => \f(CW$route\fR\->{provider}	
);
.ie n .IP "$ASTPP\->\fIfs_dialplan_xml_footer()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_dialplan_xml_footer()\fR" 4
.IX Item "$ASTPP->fs_dialplan_xml_footer()"
Return the closing lines of the Freeswitch(\s-1TM\s0) xml dialplan
.Sp
Example:  \f(CW$xml\fR .= \f(CW$ASTPP\fR\->\fIfs_dialplan_xml_footer()\fR;
.ie n .IP "$ASTPP\->\fIfs_directory_xml_header()\fR" 4
.el .IP "\f(CW$ASTPP\fR\->\fIfs_directory_xml_header()\fR" 4
.IX Item "$ASTPP->fs_directory_xml_header()"
Return the opening lines of the Freeswitch(\s-1TM\s0) xml directory.
.Sp
Example:  \f(CW$xml\fR .= \f(CW$ASTPP\fR\->fs_directory_xml_header(
	xml => ""
);
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For more information visit our website at (www.astpp.org)
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1ASTPP\s0 Info, <info@astpp.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2007 by Aleph Communications
.PP
This library is distributed under the terms of the \s-1GPL\s0 version 2.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 859:" 4
.IX Item "Around line 859:"
You forgot a '=back' before '=head1'
